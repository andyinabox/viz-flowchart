{"version":3,"file":"viz-flowchart.module.js","sources":["../src/utils.js","../src/flowchart.js","../src/actor.js","../src/step.js","../src/index.js"],"sourcesContent":["export const getBandCenter = (index, band) => {\n  const start = band(index)\n  const width = band.bandwidth()\n  return start + (width/2)\n}\n\n// pretty sure there's a d3 function somewhere\n// that will do this\nexport const getActorIndex = (id, actors) => {\n  let i, index\n  for(i = 0; i < actors.length; i++){\n    if (actors[i].id === id) {\n      index = i\n      break;\n    }\n  }\n  return index\n}\n\nexport const getActorCenter = (id, actors, scale) => {\n  const index = getActorIndex(id, actors)\n  return getBandCenter(index, scale)\n}\n\nexport const isHiddenStep = (selector, currentStep) => {\n  selector.classed('hidden-step', (d, i) => (i > currentStep))\n}\n\nexport const hasActionClass = (selector, currentStep) => {\n  selector\n    .classed('action-button', (d, i) => (d.action && i === currentStep+1))\n    .classed('hidden-step', (d, i) => (i > currentStep+1))\n}\n\nexport const isActionButton = (selector) => {\n    selector.on('click', function(d) {\n      if(select(this).classed('action-button')) d.action(d)\n    })\n}\n\nexport const parseChildren = (nodes) => {\n  const data = {}\n\n  // converte NoteList to array\n  const children =  Array.prototype.slice.call(nodes);\n  \n  data.actors = children\n    .filter(c => (c.tagName.toLowerCase() === 'viz-actor'))\n    .map(a => ({\n      id: a.id,\n      title: a.innerHTML.trim()\n  }))\n  data.steps = children\n    .filter(c => (c.tagName.toLowerCase() === 'viz-step'))\n    .map(s => ({\n      from: s.getAttribute('from'),\n      to:s.getAttribute('to'),\n      desc:  s.innerHTML.trim(),\n    }))\n\n  return data\n}\n\n","import {\n  getBandCenter,\n  getActorIndex,\n  getActorCenter,\n  isHiddenStep,\n  hasActionClass,\n  isActionButton,\n  parseChildren,\n} from './utils.js'\n\nconst { \n  scaleBand,\n  scaleOrdinal,\n  range,\n  create,\n  select,\n  path,\n  schemeDark2,\n} = window.d3\n\nconst defaults = {\n  width: 800,\n  circleRadius: 15,\n  marginTop: 0,\n  marginBottom: 0,\n  marginLeft: 10,\n  marginRight: 10,\n  stepHeight: 120,\n  flowArrowSize: 10,\n  stepDescArrowSize: 13,\n}\n\nconst template = `\n<style>\nsvg {\n  width: 100%;\n  stroke-width: 1px;\n  font-family: var(--main-font-family, 'Open Sans', Helvetica, Arial, sans-serif);\n}\n\n.actor-box {\n  /* fill: #ddd; */\n  opacity: 0.5;\n  /* stroke: black; */\n}\n\n.actor-line {\n  stroke: #ddd;\n  stroke-width: 1px;\n}\n\n.actor-text {\n  fill: black;\n  text-align: center;\n  font-size: 0.75rem;\n  height: 0.75rem;\n}\n\n.hidden-step {\n  transition: fill 200ms, stroke 200ms, opacity 200ms;\n}\n\n.step-line {\n  /* stroke: black; */\n  fill: none;\n  stroke-width: 2px;\n}\n\n.step-line.hidden-step {\n  stroke: #ccc\n}\n\n/* .step-circle { */\n  /* stroke: black; */\n  /* opacity: 0.5; */\n/* } */\n\n.step-circle.hidden-step {\n  fill: white;\n  stroke: #ccc;\n}\n\n.step-number {\n  font-family: 'Open Sans', Helvetica, Arial, sans-serif;\n  fill: white;\n  line-height: 30px;\n}\n\n.step-number.hidden-step {\n  fill: #ccc;\n}\n\n.step-desc {\n  fill: black;\n}\n\n.step-desc.hidden-step {\n  fill: #ccc;\n}\n\n.step-desc.action-button {\n  fill: white;\n  font-weight: bold;\n  cursor: pointer;\n}\n\n.step-desc-bg {\n  /* fill: white; */\n  opacity: 0.5;\n}\n\n.step-desc-bg.hidden-step {\n  opacity: 0;\n  /* fill: none; */\n}\n\n.step-desc-bg.action-button {\n  opacity: 1;\n  fill: black;\n  cursor: pointer;\n}\n</style>\n<div class=\"viz-container\"></div>\n`\n\nexport default class VizFlowchart extends HTMLElement {\n  constructor() {\n    super();\n\n    // set up shadow root\n    this.attachShadow({ mode: 'open' });\n    const { actors, steps } = parseChildren(this.children);\n    this.shadowRoot.innerHTML = template;\n    const el = this.shadowRoot.querySelector('.viz-container');\n\n    Object.assign(this, {\n      el,\n      actors,\n      steps\n    })\n    // set default options\n    this.options = Object.assign({}, defaults)\n\n    this.setup()\n  }\n\n\n  static get observedAttributes() {\n    return ['step']\n  }\n\n  attributeChangedCallback() {\n    this.update()\n  }\n\n  setup() {\n\n    const {\n      el,\n      steps,\n      actors,\n    } = this\n\n    const {\n      stepHeight,\n      marginBottom,\n      marginTop,\n      width,\n    } = this.options\n\n    const actorHeight = stepHeight * .66;\n    const stepDescFontSize = stepHeight/7;\n    const height = (steps.length * stepHeight) + (actorHeight * 2) + marginTop + marginBottom;\n\n\n    Object.assign(this.options, {\n      actorHeight,\n      stepDescFontSize,\n      height,\n    })\n\n    const step = el.getAttribute('step') || steps.length-1\n    this.currentStep = parseInt(step)\n\n    this.actorsScale = scaleBand()\n      .domain(range(actors.length))\n      .range([0, width])\n      .padding(0.25)\n\n    this.stepsScale = scaleBand()\n      .domain(range(steps.length))\n      .range([stepHeight*1.5+marginTop, height])\n\n    this.colorScale = scaleOrdinal(schemeDark2)\n\n\n    const svg = create('svg')\n    svg\n      .attr('width', width)\n      .attr('height', height)\n      .attr('viewBox', `0 0 ${width} ${height}`)\n    el.appendChild(svg.node())\n    this.svg = svg\n\n    this.createActors()\n    this.updateSteps()\n  }\n\n  createActors() {\n\n    const {\n      marginTop,\n      actorHeight,\n      height,\n      marginBottom,\n    } = this.options\n\n    const {\n      svg,\n      actors,\n      actorsScale,\n      colorScale,\n    } = this\n\n    const y = marginTop\n\n    const actorsGroup = svg.append('g').attr('class', 'actors')\n\n    // tops\n    actorsGroup.append('g').attr('class', 'actor-boxes')\n      .selectAll('.actor-box')\n      .data(actors)\n      .enter().append('rect')\n        .attr('class', 'actor-box')\n        .attr('height', actorHeight)\n        .attr('width', actorsScale.bandwidth())\n        .attr('fill', (d, i) => colorScale(i))\n        .attr('x', (d, i) => actorsScale(i))\n        .attr('y',  y)\n\n    actorsGroup.append('g').attr('class', 'actor-texts')\n      .selectAll('.actor-text')\n      .data(actors)\n      .enter().append('text')\n        .attr('class', 'actor-text')\n        .attr('x', (d, i) => getBandCenter(i, actorsScale))\n        .attr('y',  y+(actorHeight/2))\n        .attr('dominant-baseline', 'middle')\n        .attr('text-anchor', 'middle')\n        .text(d => d.title)\n        \n    actorsGroup.append('g').attr('class', 'actor-lines')\n      .selectAll('.actor-line')\n      .data(actors)\n      .enter().append('line')\n        .attr('class', 'actor-line')\n        .attr('x1', (d, i) => getBandCenter(i, actorsScale))\n        .attr('x2', (d, i) => getBandCenter(i, actorsScale))\n        .attr('y1',  y+actorHeight)\n        .attr('y2', height-marginBottom-actorHeight)\n        .text(d => d.title)      \n\n    // bottoms\n    actorsGroup.append('g').attr('class', 'actor-boxes')\n      .selectAll('.actor-box')\n      .data(actors)\n      .enter().append('rect')\n        .attr('class', 'actor-box')\n        .attr('height', actorHeight)\n        .attr('width', actorsScale.bandwidth())\n        .attr('fill', (d, i) => colorScale(i))\n        .attr('x', (d, i) => actorsScale(i))\n        .attr('y',  height-marginBottom-actorHeight)\n\n    actorsGroup.append('g').attr('class', 'actor-texts')\n      .selectAll('.actor-text')\n      .data(actors)\n      .enter().append('text')\n        .attr('class', 'actor-text')\n        .attr('x', (d, i) => getBandCenter(i, actorsScale))\n        .attr('y',  height-marginBottom-actorHeight/2)\n        .attr('dominant-baseline', 'middle')\n        .attr('text-anchor', 'middle')\n        .text(d => d.title)\n  }\n\n  updateSteps() {\n\n    const {\n      svg,\n      actors,\n      steps,\n      actorsScale,\n      stepsScale,\n      currentStep,\n      colorScale,\n    } = this\n\n    const {\n      flowArrowSize,\n      circleRadius,\n      stepDescFontSize,\n    } = this.options\n\n    const stepsGroup = svg.append('g').attr('class', 'steps')\n\n    const x1 = d => getActorCenter(d.from, actors, actorsScale)\n    const x2 = d => getActorCenter(d.to, actors, actorsScale)\n    const y1 = (d, i) => stepsScale(i)\n    const isLoop = d => d.to === d.from\n\n    const drawStepLine = (d, i) => {\n      const p = path()\n      const from = getActorIndex(d.from, actors)\n      const to = getActorIndex(d.to, actors)\n\n      if (from === to) {\n        // p.moveTo(x1(d), stepsScale(i-1))\n        // p.lineTo(x2(d), stepsScale(i+1)-circleRadius)\n        p.arc(x1(d), stepsScale(i), stepsScale.bandwidth(), Math.PI/2, 3*Math.PI/2)\n      } else {\n        p.moveTo(x1(d), stepsScale(i))\n        p.lineTo(x2(d), stepsScale(i))\n        // if (i+1 < steps.length && !isLoop(steps[i+1])) p.lineTo(x2(d), stepsScale(i+1))\n      }\n\n      // arrowheads\n      if (from < to) {\n        p.moveTo(x2(d)-flowArrowSize, stepsScale(i)-flowArrowSize/2)\n        p.lineTo(x2(d), stepsScale(i))\n        p.lineTo(x2(d)-flowArrowSize, stepsScale(i)+flowArrowSize/2)\n      } else if (to < from) {\n        p.moveTo(x2(d)+flowArrowSize, stepsScale(i)-flowArrowSize/2)\n        p.lineTo(x2(d), stepsScale(i))\n        p.lineTo(x2(d)+flowArrowSize, stepsScale(i)+flowArrowSize/2)\n      } else if (to === from) {\n        // p.moveTo(x2(d)-flowArrowSize/2, stepsScale(i+1)-flowArrowSize-circleRadius)\n        // p.lineTo(x2(d), stepsScale(i+1)-circleRadius)\n        // p.lineTo(x2(d)+flowArrowSize/2, stepsScale(i+1)-flowArrowSize-circleRadius)\n      }\n\n      return p.toString()\n    }\n\n    stepsGroup.append('g').attr('class', 'step-lines')\n      .selectAll('.step-line')\n      .data(steps)\n      .join(\n        enter => enter.append('path')\n          .attr('class', 'step-line')\n          .classed('step-line-loop', d => isLoop(d))\n          .classed('step-line-normal', d => !isLoop(d))\n          .call(isHiddenStep, currentStep)\n          .attr('stroke', d => colorScale(getActorIndex(d.from, actors)))\n          .attr('d', drawStepLine),\n        update => update.call(isHiddenStep, currentStep),\n        exit => exit.remove()\n      )\n\n    stepsGroup.append('g').attr('class', 'step-circles')\n      .selectAll('.step-circle')\n      .data(steps)\n      .join(\n        enter => enter.append('circle')\n          .attr('class', 'step-circle')\n          .call(isHiddenStep, currentStep)\n          .attr('fill', d => colorScale(getActorIndex(d.from, actors)))\n          .attr('r', circleRadius)\n          .attr('cx', x1)\n          .attr('cy', y1),\n        update => update.call(isHiddenStep, currentStep),\n        exit => exit.remove()\n      )\n\n    stepsGroup.append('g').attr('class', 'step-numbers')\n      .selectAll('.step-number')\n      .data(steps)\n      .join(\n        enter => enter.append('text')\n          .attr('class', 'step-number')\n          .call(isHiddenStep, currentStep)\n          .style('font-size', `${circleRadius*1.2}px`)\n          .attr('x', x1)\n          .attr('y', (d, i) => stepsScale(i) + 2)\n          .text((d, i) => i+1)\n          .attr('dominant-baseline', 'middle')\n          .attr('text-anchor', 'middle'),\n        update => update.call(isHiddenStep, currentStep),\n        exit => exit.remove()\n      )\n    \n    stepsGroup.append('g').attr('class', 'step-desc-bgs')\n      .selectAll('.step-desc-bg')\n      .data(steps)\n      .join(\n        enter => enter.append('path')\n          .attr('class', 'step-desc-bg')\n          .call(hasActionClass, currentStep)\n          .call(this.drawStepDescriptionBox.bind(this))\n          .attr('fill', d => colorScale(getActorIndex(d.from, actors))),\n          update => update\n          .call(hasActionClass, currentStep),\n        exit => exit.remove()\n      )\n\n    stepsGroup.append('g').attr('class', 'step-descs')\n      .selectAll('.step-desc')\n      .data(steps)\n      .join(\n        enter => enter.append('text')\n          .attr('class', 'step-desc')\n          .style('font-size', stepDescFontSize+'px')\n          .call(hasActionClass, currentStep)\n          .call(isActionButton)\n          .attr('x', (svg.attr('width') / 2))\n          .attr('y', (d, i) => stepsScale(i) - stepsScale.bandwidth()/2)\n          .text(d  => d.desc)\n          .attr('dominant-baseline', 'middle')\n          .attr('text-anchor', 'middle'),\n        update => update\n          .call(hasActionClass, currentStep)\n          .call(isActionButton),\n        exit => exit.remove()\n      )\n  }\n\n  drawStepDescriptionBox(selector) {\n    const {\n      actors,\n      actorsScale,\n      stepsScale,\n    } = this\n    const {\n      stepDescArrowSize,\n      stepDescFontSize,\n      marginRight,\n      marginLeft,\n      width,\n    } = this.options\n\n    selector.attr('d', (d, i) => {\n      const p = path()\n      const top = stepsScale(i) - (stepsScale.bandwidth()/2) - stepDescFontSize\n      const bottom = top + stepDescFontSize*2\n      const arrowPointX = getActorCenter(d.from, actors, actorsScale)\n      p.moveTo(marginLeft, top)\n      p.lineTo(width-marginRight, top)\n      p.lineTo(width-marginRight, bottom)\n      p.lineTo(arrowPointX + stepDescArrowSize/2, bottom)\n      p.lineTo(arrowPointX, bottom+stepDescArrowSize)\n      p.lineTo(arrowPointX - stepDescArrowSize/2, bottom)\n      p.lineTo(marginLeft, bottom)\n      p.closePath()\n      return p.toString()\n    })\n  }\n\n  update() {\n    this.updateSteps()\n  }\n}\n","export default class VizFlowchartActor extends HTMLElement {\n  constructor() {\n    super();\n  }\n  static get observedAttributes() {\n    return ['from', 'to']\n  }\n}\n\n","export default class VizFlowchartStep extends HTMLElement {\n  constructor() {\n    super();\n  }\n  static get observedAttributes() {\n    return ['id', 'title']\n  }\n}\n","import VizFlowchart from './flowchart.js'\nimport VizFlowchartActor from './actor.js'\nimport VizFlowchartStep from './step.js'\n\ncustomElements.define('viz-actor', VizFlowchartActor);\ncustomElements.define('viz-step', VizFlowchartStep);\ncustomElements.define('viz-flowchart', VizFlowchart);\n\n\n// import { register, html, useRef, useEffect, useMemo, useCallback } from '/modules/preact.js'\n// import * as d3 from '/vendor/d3.js'\n\n// const { \n//   scaleBand,\n//   scaleOrdinal,\n//   range,\n//   create,\n//   select,\n//   path,\n//   schemeDark2,\n// } = d3\n\n\n// /*\n// const sampleData = {\n//   actors: [\n//     { id: 'user', title: 'User', },\n//     { id: 'frontend', title: 'Frontend' },\n//     { id: 'tenent',  title: 'auth0 Tenent' },\n//     { id: 'api', title: 'API' },\n//   ],\n//   steps: [\n//     { from: 'user', to: 'user', desc: 'User visits site', type: 'interaction' },\n//     { from: 'user', to: 'frontend', desc: 'User clicks on the login link', type: 'interaction', action: () => {} },\n//     { from: 'frontend', to: 'frontend', desc: 'Frontend generates code verifier and code challenge ', type: 'automation' },\n//     { from: 'frontend', to: 'tenent', desc: 'Redirect buser to /authorize with request data in query string', type: 'redirect' },\n//     { from: 'tenent', to: 'user', desc: 'User sees the login form', type: 'response' },\n//     { from: 'user', to: 'tenent', desc: 'User logs in / authenticates', type: 'interaction' },\n//     { from: 'tenent', to: 'frontend', desc: 'User is redirected back to the SPA, with authorization code', type: 'redirect' },\n//     { from: 'frontend', to: 'tenent', desc: 'Auth code + code verifier' },\n//     { from: 'tenent', to: 'tenent', desc: 'Validate code verifier and challenge' },\n//     { from: 'tenent', to: 'frontend', desc: 'ID token and access token' , action: () => {} },\n//     { from: 'frontend', to: 'api', desc: 'Request data with access token'},\n//     { from: 'api', to: 'frontend', desc: 'Response with data' },\n//     { from: 'frontend', to: 'user', desc: 'User sees data' },\n//   ]\n// }\n// */\n\n\n// function FlowsChart(props) {\n\n//   const {\n//     width = 800,\n//     circleRadius = 15,\n//     marginTop = 0,\n//     marginBottom = 0,\n//     marginLeft = 10,\n//     marginRight = 10,\n//     stepHeight = 120,\n//     children,\n//   } = props\n\n//   const data = props.data || parseChildren(children)\n\n\n//   const {\n//     actors,\n//     steps,\n//   } = data\n\n//   const step = (typeof props.step !== 'undefined') ? step : steps.length-1\n//   const actorHeight = stepHeight * .66\n\n//   const currentStep = parseInt(step)\n//   const el = useRef(null)\n//   const svgRef = useRef(create('svg'))\n//   const svg = svgRef.current\n\n//   const stepDescFontSize = useMemo(() => stepHeight/7, [stepHeight])\n//   const height = useMemo(\n//     () => parseInt(props.height) || (steps.length * stepHeight) + (actorHeight * 2) + marginTop + marginBottom,\n//     [steps, stepHeight, marginTop, marginBottom, props.height]\n//   )\n\n//   const actorsScale = useMemo(\n//     () => scaleBand()\n//       .domain(range(actors.length))\n//       .range([0, width])\n//       .padding(0.25),\n//     [actors, width],\n//   )\n\n//   const stepsScale = useMemo(\n//     () => scaleBand()\n//        .domain(range(steps.length))\n//        .range([stepHeight*1.5+marginTop, height]),\n//     [steps, stepHeight, marginTop, height]\n//   )\n\n//   useEffect(() => {\n//     if (el.current && svgRef.current) el.current.appendChild(svgRef.current.node())\n//   }, [el.current, svgRef.current])\n\n//   useEffect(() => {\n//       svg\n//         .attr('width', width)\n//         .attr('height', height)\n//         .attr('viewBox', `0 0 ${width} ${height}`)\n//   }, [width, height])\n\n  \n//   useEffect(() => {\n//     createActors(svg, actors)\n//   }, [actors])\n\n//   useEffect(() => {\n//     updateSteps(svg, steps, currentStep)\n//   }, [currentStep])\n\n//   const drawStepDescriptionBox = useCallback((selector, scale, arrowSize, fontSize) => {\n//     selector.attr('d', (d, i) => {\n//       const p = path()\n//       const top = scale(i) - (scale.bandwidth()/2) - fontSize\n//       const bottom = top + fontSize*2\n//       const arrowPointX = getActorCenter(d.from, actors, actorsScale)\n//       p.moveTo(marginLeft, top)\n//       p.lineTo(width-marginRight, top)\n//       p.lineTo(width-marginRight, bottom)\n//       p.lineTo(arrowPointX + arrowSize/2, bottom)\n//       p.lineTo(arrowPointX, bottom+arrowSize)\n//       p.lineTo(arrowPointX - arrowSize/2, bottom)\n//       p.lineTo(marginLeft, bottom)\n//       p.closePath()\n//       return p.toString()\n//     })\n//   }, [actors, width, marginLeft, marginRight])\n\n//   const createActors = useCallback((svg) => {\n//     const y = marginTop\n\n//     const actorsGroup = svg.append('g').attr('class', 'actors')\n\n//     // tops\n//     actorsGroup.append('g').attr('class', 'actor-boxes')\n//       .selectAll('.actor-box')\n//       .data(actors)\n//       .enter().append('rect')\n//         .attr('class', 'actor-box')\n//         .attr('height', actorHeight)\n//         .attr('width', actorsScale.bandwidth())\n//         .attr('fill', (d, i) => colorScale(i))\n//         .attr('x', (d, i) => actorsScale(i))\n//         .attr('y',  y)\n\n//     actorsGroup.append('g').attr('class', 'actor-texts')\n//       .selectAll('.actor-text')\n//       .data(actors)\n//       .enter().append('text')\n//         .attr('class', 'actor-text')\n//         .attr('x', (d, i) => getBandCenter(i, actorsScale))\n//         .attr('y',  y+(actorHeight/2))\n//         .attr('dominant-baseline', 'middle')\n//         .attr('text-anchor', 'middle')\n//         .text(d => d.title)\n        \n//     actorsGroup.append('g').attr('class', 'actor-lines')\n//       .selectAll('.actor-line')\n//       .data(actors)\n//       .enter().append('line')\n//         .attr('class', 'actor-line')\n//         .attr('x1', (d, i) => getBandCenter(i, actorsScale))\n//         .attr('x2', (d, i) => getBandCenter(i, actorsScale))\n//         .attr('y1',  y+actorHeight)\n//         .attr('y2', height-marginBottom-actorHeight)\n//         .text(d => d.title)      \n\n//     // bottoms\n//     actorsGroup.append('g').attr('class', 'actor-boxes')\n//       .selectAll('.actor-box')\n//       .data(actors)\n//       .enter().append('rect')\n//         .attr('class', 'actor-box')\n//         .attr('height', actorHeight)\n//         .attr('width', actorsScale.bandwidth())\n//         .attr('fill', (d, i) => colorScale(i))\n//         .attr('x', (d, i) => actorsScale(i))\n//         .attr('y',  height-marginBottom-actorHeight)\n\n//     actorsGroup.append('g').attr('class', 'actor-texts')\n//       .selectAll('.actor-text')\n//       .data(actors)\n//       .enter().append('text')\n//         .attr('class', 'actor-text')\n//         .attr('x', (d, i) => getBandCenter(i, actorsScale))\n//         .attr('y',  height-marginBottom-actorHeight/2)\n//         .attr('dominant-baseline', 'middle')\n//         .attr('text-anchor', 'middle')\n//         .text(d => d.title)\n        \n//   }, [actors, stepHeight, height, marginBottom, marginTop])\n\n//   const updateSteps = useCallback((svg, steps, currentStep) => {\n\n//     const stepsGroup = svg.append('g').attr('class', 'steps')\n\n//     const x1 = d => getActorCenter(d.from, actors, actorsScale)\n//     const x2 = d => getActorCenter(d.to, actors, actorsScale)\n//     const y1 = (d, i) => stepsScale(i)\n//     const isLoop = d => d.to === d.from\n//     const arrowSize = 10;\n\n//     const drawStepLine = (d, i) => {\n//       const p = path()\n//       const from = getActorIndex(d.from, actors)\n//       const to = getActorIndex(d.to, actors)\n\n//       if (from === to) {\n//         // p.moveTo(x1(d), stepsScale(i-1))\n//         // p.lineTo(x2(d), stepsScale(i+1)-circleRadius)\n//         p.arc(x1(d), stepsScale(i), stepsScale.bandwidth(), Math.PI/2, 3*Math.PI/2)\n//       } else {\n//         p.moveTo(x1(d), stepsScale(i))\n//         p.lineTo(x2(d), stepsScale(i))\n//         // if (i+1 < steps.length && !isLoop(steps[i+1])) p.lineTo(x2(d), stepsScale(i+1))\n//       }\n\n//       // arrowheads\n//       if (from < to) {\n//         p.moveTo(x2(d)-arrowSize, stepsScale(i)-arrowSize/2)\n//         p.lineTo(x2(d), stepsScale(i))\n//         p.lineTo(x2(d)-arrowSize, stepsScale(i)+arrowSize/2)\n//       } else if (to < from) {\n//         p.moveTo(x2(d)+arrowSize, stepsScale(i)-arrowSize/2)\n//         p.lineTo(x2(d), stepsScale(i))\n//         p.lineTo(x2(d)+arrowSize, stepsScale(i)+arrowSize/2)\n//       } else if (to === from) {\n//         // p.moveTo(x2(d)-arrowSize/2, stepsScale(i+1)-arrowSize-circleRadius)\n//         // p.lineTo(x2(d), stepsScale(i+1)-circleRadius)\n//         // p.lineTo(x2(d)+arrowSize/2, stepsScale(i+1)-arrowSize-circleRadius)\n//       }\n\n//       return p.toString()\n//     }\n\n//     stepsGroup.append('g').attr('class', 'step-lines')\n//       .selectAll('.step-line')\n//       .data(steps)\n//       .join(\n//         enter => enter.append('path')\n//           .attr('class', 'step-line')\n//           .classed('step-line-loop', d => isLoop(d))\n//           .classed('step-line-normal', d => !isLoop(d))\n//           .call(isHiddenStep, currentStep)\n//           .attr('stroke', d => colorScale(getActorIndex(d.from, actors)))\n//           .attr('d', drawStepLine),\n//         update => update.call(isHiddenStep, currentStep),\n//         exit => exit.remove()\n//       )\n\n//     stepsGroup.append('g').attr('class', 'step-circles')\n//       .selectAll('.step-circle')\n//       .data(steps)\n//       .join(\n//         enter => enter.append('circle')\n//           .attr('class', 'step-circle')\n//           .call(isHiddenStep, currentStep)\n//           .attr('fill', d => colorScale(getActorIndex(d.from, actors)))\n//           .attr('r', circleRadius)\n//           .attr('cx', x1)\n//           .attr('cy', y1),\n//         update => update.call(isHiddenStep, currentStep),\n//         exit => exit.remove()\n//       )\n\n//     stepsGroup.append('g').attr('class', 'step-numbers')\n//       .selectAll('.step-number')\n//       .data(steps)\n//       .join(\n//         enter => enter.append('text')\n//           .attr('class', 'step-number')\n//           .call(isHiddenStep, currentStep)\n//           .style('font-size', `${circleRadius*1.2}px`)\n//           .attr('x', x1)\n//           .attr('y', (d, i) => stepsScale(i) + 2)\n//           .text((d, i) => i+1)\n//           .attr('dominant-baseline', 'middle')\n//           .attr('text-anchor', 'middle'),\n//         update => update.call(isHiddenStep, currentStep),\n//         exit => exit.remove()\n//       )\n    \n//     stepsGroup.append('g').attr('class', 'step-desc-bgs')\n//       .selectAll('.step-desc-bg')\n//       .data(steps)\n//       .join(\n//         enter => enter.append('path')\n//           .attr('class', 'step-desc-bg')\n//           .call(hasActionClass, currentStep)\n//           .call(drawStepDescriptionBox, stepsScale, 13, stepDescFontSize)\n//           .attr('fill', d => colorScale(getActorIndex(d.from, actors))),\n//           update => update\n//           .call(hasActionClass, currentStep),\n//         exit => exit.remove()\n//       )\n\n//     stepsGroup.append('g').attr('class', 'step-descs')\n//       .selectAll('.step-desc')\n//       .data(steps)\n//       .join(\n//         enter => enter.append('text')\n//           .attr('class', 'step-desc')\n//           .style('font-size', stepDescFontSize+'px')\n//           .call(hasActionClass, currentStep)\n//           .call(isActionButton)\n//           .attr('x', (svg.attr('width') / 2))\n//           .attr('y', (d, i) => stepsScale(i) - stepsScale.bandwidth()/2)\n//           .text(d  => d.desc)\n//           .attr('dominant-baseline', 'middle')\n//           .attr('text-anchor', 'middle'),\n//         update => update\n//           .call(hasActionClass, currentStep)\n//           .call(isActionButton),\n//         exit => exit.remove()\n//       )\n//   }, [actors, stepDescFontSize])\n\n//   return html`\n//     <style>\n//       svg {\n//         width: 100%;\n//         stroke-width: 1px;\n//         font-family: var(--main-font-family, 'Open Sans', Helvetica, Arial, sans-serif);\n//       }\n\n//       .actor-box {\n//         /* fill: #ddd; */\n//         opacity: 0.5;\n//         /* stroke: black; */\n//       }\n\n//       .actor-line {\n//         stroke: #ddd;\n//         stroke-width: 1px;\n//       }\n\n//       .actor-text {\n//         fill: black;\n//         text-align: center;\n//         font-size: 0.75rem;\n//         height: 0.75rem;\n//       }\n\n//       .hidden-step {\n//         transition: fill 200ms, stroke 200ms, opacity 200ms;\n//       }\n\n//       .step-line {\n//         /* stroke: black; */\n//         fill: none;\n//         stroke-width: 2px;\n//       }\n\n//       .step-line.hidden-step {\n//         stroke: #ccc\n//       }\n\n//       /* .step-circle { */\n//         /* stroke: black; */\n//         /* opacity: 0.5; */\n//       /* } */\n\n//       .step-circle.hidden-step {\n//         fill: white;\n//         stroke: #ccc;\n//       }\n\n//       .step-number {\n//         font-family: 'Open Sans', Helvetica, Arial, sans-serif;\n//         fill: white;\n//         line-height: 30px;\n//       }\n\n//       .step-number.hidden-step {\n//         fill: #ccc;\n//       }\n\n//       .step-desc {\n//         fill: black;\n//       }\n\n//       .step-desc.hidden-step {\n//         fill: #ccc;\n//       }\n\n//       .step-desc.action-button {\n//         fill: white;\n//         font-weight: bold;\n//         cursor: pointer;\n//       }\n\n//       .step-desc-bg {\n//         /* fill: white; */\n//         opacity: 0.5;\n//       }\n\n//       .step-desc-bg.hidden-step {\n//         opacity: 0;\n//         /* fill: none; */\n//       }\n\n//       .step-desc-bg.action-button {\n//         opacity: 1;\n//         fill: black;\n//         cursor: pointer;\n//       }\n//     </style>\n//     <div class=\"d3-container\" ref=${el}></div>\n//   `\n// }\n\n\n// const colorScale = scaleOrdinal(schemeDark2)\n\n// const getBandCenter = (index, band) => {\n//   const start = band(index)\n//   const width = band.bandwidth()\n//   return start + (width/2)\n// }\n\n// // pretty sure there's a d3 function somewhere\n// // that will do this\n// const getActorIndex = (id, actors) => {\n//   let i, index\n//   for(i = 0; i < actors.length; i++){\n//     if (actors[i].id === id) {\n//       index = i\n//       break;\n//     }\n//   }\n//   return index\n// }\n\n// const getActorCenter = (id, actors, scale) => {\n//   const index = getActorIndex(id, actors)\n//   return getBandCenter(index, scale)\n// }\n\n// const isHiddenStep = (selector, currentStep) => {\n//   selector.classed('hidden-step', (d, i) => (i > currentStep))\n// }\n\n// const hasActionClass = (selector, currentStep) => {\n//   selector\n//     .classed('action-button', (d, i) => (d.action && i === currentStep+1))\n//     .classed('hidden-step', (d, i) => (i > currentStep+1))\n// }\n\n// const isActionButton = (selector) => {\n//     selector.on('click', function(d) {\n//       if(select(this).classed('action-button')) d.action(d)\n//     })\n// }\n\n// const parseChildren = (children) => {\n//   const data = {}\n\n//   data.actors = children\n//     .filter(a => (a.type === 'f-actor'))\n//     .map(({ props }) => ({\n//       id: props.id,\n//       title: props.children[0].trim()\n//   }))\n//   data.steps = children\n//     .filter(s => (s.type === 'f-step'))\n//     .map(({ props }) => ({\n//       from: props.from,\n//       to: props.to,\n//       desc: props.children[0].trim(),\n//     }))\n\n//   return data\n// }\n\n// function Actor() {\n//   return html``\n// }\n\n// function Step() {\n//   return html``\n// }\n\n// register(Actor, 'f-actor', ['from', 'to'])\n// register(Step, 'f-step', ['id', 'title'])\n// register(FlowsChart, 'f-chart', ['width', 'height', 'step'], { shadow: true })"],"names":["const","getBandCenter","index","band","bandwidth","getActorIndex","id","actors","i","length","getActorCenter","scale","isHiddenStep","selector","currentStep","classed","d","hasActionClass","action","isActionButton","on","select","this","parseChildren","nodes","data","children","Array","prototype","slice","call","filter","c","tagName","toLowerCase","map","a","title","innerHTML","trim","steps","s","from","getAttribute","to","desc","window","d3","defaults","width","circleRadius","marginTop","marginBottom","marginLeft","marginRight","stepHeight","flowArrowSize","stepDescArrowSize","template","VizFlowchart","constructor","attachShadow","mode","shadowRoot","el","querySelector","Object","assign","options","setup","observedAttributes","attributeChangedCallback","update","actorHeight","height","step","parseInt","actorsScale","scaleBand","domain","range","padding","stepsScale","colorScale","scaleOrdinal","schemeDark2","svg","create","attr","appendChild","node","createActors","updateSteps","y","actorsGroup","append","selectAll","enter","text","stepsGroup","x1","x2","y1","isLoop","drawStepLine","p","path","arc","Math","PI","moveTo","lineTo","toString","join","exit","remove","style","drawStepDescriptionBox","bind","stepDescFontSize","top","bottom","arrowPointX","closePath","HTMLElement","VizFlowchartActor","VizFlowchartStep","customElements","define"],"mappings":"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"}